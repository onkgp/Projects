# 주석은 #을 사용한다.

# 자료형(DayaType) : 프로그래밍을 할 때 쓰이는 숫자, 문자열 등

# 자료형의 종류 : 숫자형, 문자열, 리스트, 튜플, 딕셔너리, 집합, 불린(Boolean), 변수 등

# 숫자형 → 크게 두가지로 분류하면 정수형(Integer)과 부동소수점(Float)이 있음
"""
- 정수 : 12345
- 실수 : 123.45
- 복소수 :1 + 10i
- 8진수 : 0o25
- 16진수 : 0x2F
"""

aa = 123 #정수형은 파이썬에서 long형이 따로 없고 모든 정수는 int형으로 담을 수 있다
aa = -456
aa = 0
print(aa) # 실행시 0이 출력되는 이유는 aa변수에 처음에는 123을 넣었다가 -456으로 변경했고 마지막에는 0을 넣었기 때문이다.


bb = 23.22 # 부동소수점
bb = 32.4E-3 # E표기법 : E뒤의 값이 10지수임을 표현 → 32.4*10^-3을 의미
print(bb)


cc = 0o166 # 8진수 표기법
dd = 0xabc #16진수 표기법
print(cc, dd)


"""
- 사칙연산(+, -, *, /) : 계산기 부호와 마찬가지로 사용 가능하다.
- ** : 거듭제곱을 의미한다.
- % : 나눗셈 후 나머지 값을 반환하는 연산자
- // : 나눗셈 후 소수점 아랫자리를 버리는 연산자
"""
a = 2
b = 5
c = 10

print (a+b)
print (c*a)
print (b**a)
print (7%2)
print (7%10) #나눈 값이 0보다 작으면 나눌 값을 그대로 출력한다. 현재 예시에서는 7을 출력하게 됨
print (7//2)


# 문자열 : 문자의 나열을 의미한다. (문자들의 집합)
# 작은 따옴표를 이용해서 문자열을 지정할 수 있다. 공백과 띄어쓰기가 그대로 유지된다. ex) '헬로우 파이썬!!'
# 큰 따옴표는 작은 따옴표와 같은 기능을 제공한며 큰 따옴표 안에는 작은 따옴표도 추가할 수 있다. ex) "I'm OK!!"
print ("I'm OK!!")
# 세개의 따옴표(""" or ''')는 여러 줄에 걸친 문자열을 표현할 때 사용한다. 여러줄의 주석처리를 할 때도 활용 가능하다.
'''안녕하세요!
파이썬의 세계에 오신 것을 환영합니다.
감사합니다.'''

print ('''안녕하세요!
파이썬의 세계에 오신 것을 환영합니다.
감사합니다.''')

# 파이썬에서는 문자형(char형)이 따로 없다. 필요하지 않음.


'''[이스케이프 코드]
\n : 개행(줄바꿈)
\r : 캐리지 리턴
\" : 큰따옴표 출력 (")
\' : 작은따옴표 출력 (')
\0000 : 널문자
\t : 수평탭
\\ : 역슬래시 출력 ('\')
'''

# 문자열 연산 : 파이썬에서는 문자열을 더하고 곱할 수 있다.

# 문자열 더하기(Concatenation) : 문자열 + 문자열
a = "You've got"
b = "a friend"
print (a+b)

# 문자열 곱하기 : (문자열 X 숫자)는 입력한 숫자만큼 문자열을 반복한다.
c="hello"
print(c*3)

print("+"*30)
print("Hello Pytho")
print("+"*30)


# 인덱싱
str="You've got a friend"
print(str[4])
print(str[6])
print(str[7])
print(str[10])
print(str[13])

print(str[-1]) # 뒤에서부터 첫 번째 문자를 표시할 때도 0부터 세어야 할 것 같은데 그렇지 않다. 0과 -0의 값은 수학적으로 같은 의미이라서 -0도 0을 뜻하기 때문이다.

str1 = str[-6] + str[-5] + str[-4] + str[-3] + str[-2] + str[-1]
print(str1)

# 슬라이싱
print(str[7:10]) # 7:9가 아닌 이유를 살펴보면 슬라이싱의 수식이 다음과 같은 뜻이기 때문이다   7 <= str < 10
print(str[7:]) # 끝 번호를 생략하면 시작 번호부터 그 문자열의 끝까지 출력한다. 당연히 그 반대도 가능함
print(str[:]) # 전체 출력
print(str[-6:])


# 슬라이싱 활용
str="201702152040" #2017년 2월 15일 8시 40분
year=str[:4]
date=str[:8]
time=str[8:]
print(year+"년")
print(date)
print(time)